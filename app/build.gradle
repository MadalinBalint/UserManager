plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "androidx.navigation.safeargs.kotlin"
    id "kotlin-kapt" // Required for annotation processing.
}

ext {
    lifecycle_version = "2.3.0"
    retrofit_version = "2.9.0"
}

def versionPropsFile = rootProject.file("version.properties")
def versionBuild

android {
    compileSdkVersion 30
    buildToolsVersion = "30.0.3"

    /* Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps["VERSION_BUILD"].toInteger()
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    /* Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk */
    ext.autoIncrementBuildNumber = {
        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionBuild = versionProps["VERSION_BUILD"].toInteger() + 1
            versionProps["VERSION_BUILD"] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }

    defaultConfig {
        applicationId "com.mendelin.usermanager"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode versionBuild
        versionName "0.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        resConfigs "en"

        buildConfigField "String", "BASE_URL", "\"https://gorest.co.in/\""
        buildConfigField "String", "API_AUTHORIZATION", "\"Authorization\""
        buildConfigField "String", "API_BEARER", "\"Bearer\""
        buildConfigField "String", "REST_API_ACCESS_TOKEN", "\"9e8c7487c322d47eb21d08d5726b7a3f81537912d1cdd74bfb754194ef0a65b7\""

        /* REST API endpoints */
        buildConfigField "String", "ENDPOINT_LIST_USERS", "\"public-api/users\""
        buildConfigField "String", "ENDPOINT_CREATE_USER", "\"public-api/users\""
        buildConfigField "String", "ENDPOINT_DELETE_USER", "\"public-api/users/{id}\""

        buildConfigField "String", "QUERY_ID", "\"id\""
        buildConfigField "String", "QUERY_PAGE", "\"page\""

        dexOptions {
            javaMaxHeapSize "4g"
        }

        buildFeatures {
            dataBinding = true
            viewBinding = true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "usermanager_${variant.buildType.name}_${defaultConfig.versionName}(${defaultConfig.versionCode}).apk"
        }
    }

    buildTypes {
        release {
            debuggable true
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    // Hook to check if the release/debug task is among the tasks to be executed.
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) { /* when run debug task */
            autoIncrementBuildNumber()
        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            autoIncrementBuildNumber()
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    packagingOptions {
        exclude "META-INF/proguard/androidx-annotations.pro"
    }
}

dependencies {
    /* Testing */
    implementation fileTree(dir: "libs", include: ["*.aar", "*.jar"], exclude: [])
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "junit:junit:4.13.2"

    /* AndroidX test */
    def androidx_test_version = "1.3.0"
    testImplementation "androidx.test:core:$androidx_test_version"
    androidTestImplementation "androidx.test:core:$androidx_test_version"
    testImplementation "androidx.test:runner:$androidx_test_version"
    androidTestImplementation "androidx.test:runner:$androidx_test_version"

    /* Architecture components testing */
    def androidx_arch_test_version = "2.1.0"
    testImplementation "androidx.arch.core:core-testing:$androidx_arch_test_version"
    androidTestImplementation "androidx.arch.core:core-testing:$androidx_arch_test_version"

    /* JUnit5 testing */
    def junit_jupiter_version = '5.7.1'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    /* Kotlin */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"

    /* Android libraries */
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.android.material:material:1.3.0"
    implementation "androidx.security:security-crypto:1.1.0-alpha03"

    /* Navigation components */
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    /* LiveData, ViewModel */
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    /* ReactiveX */
    implementation "io.reactivex.rxjava3:rxkotlin:3.0.1"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.0"

    /* Gson */
    implementation "com.google.code.gson:gson:2.8.6"

    /* Retrofit networking library */
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofit_version"

    /* Timber logging */
    implementation "com.jakewharton.timber:timber:4.7.1"
}